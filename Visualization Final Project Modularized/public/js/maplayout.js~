/*

  File: maplayout.js

  Authors: Clark Barnett and Dylan Zwick

  Final Project: CS-6630 Visualization
  University of Utah
  Fall, 2016

  This file handles the interactive map layout.
*/

/*
  Constructor for the MapLayout
*/

function MapLayout(dataCharts){
    var self = this;
    self.dataCharts = dataCharts;

    self.init();
};

MapLayout.prototype.init = function(){
    var self = this;

    self.width = 600;
    self.height = 400;

    self.selTrans = false;
    self.scaleFactor = 1;

    self.svg = d3.select('#map').append('svg')
	.attr('width', self.width)
	.attr('height', self.height);

    self.mapFeatures = svg.append('g')
	.attr('class', 'features');

    self.mapSchools = svg.append('g')
	.attr('class','schools');

    self.mapVoronoi = svg.append('g')
	.attr('class','voronoi')
	.classed('hidden-lines',true);

    self.mapSimilar = svg.append('g')
	.attr('class','similar');
    
    self.zoom = d3.zoom()
	.scaleExtent([1,1000])
	.translateExtent([[0,0],[width,height]])
	.on('zoom',self.zoomZoom);

    self.svg.call(zoom).on('dblclick.zoom',null);

    //Defines the function of the "zoom reset" button.
    d3.select("#zoom-reset")
	.on('click',function(){
	    self.svg.transition().duration(750)
		.call(zoom.transform,d3.zoomIdentity);
	})
    
    // We define a geographical projection
    //     https://github.com/mbostock/d3/wiki/Geo-Projections
    // and set the initial zoom to show the features.
    self.projection = d3.geoAlbersUsa()
	.translate([width/2,height/2])
	.scale(width*1.3);

    // We prepare a path object and apply the projection to it.
    self.path = d3.geoPath()
	.projection(projection);
    
    // Load the features from the GeoJSON.
    d3.json('data/us-states.json', function(error, nation) {
    
	self.mapFeatures
	    .selectAll('path')
	    .data(nation.features)
	    .enter()
	    .append('path')
	    .attr('d', path);
	
    });
    
    self.mapSchools
	.selectAll('circle')
	.data(schoolSimilarityMatrix)
	.enter().append('circle')
	.attr("cx", function (d) {
	    return projection([d[0].LONGITUDE, d[0].LATITUDE])[0];
	})
	.attr("cy", function (d) {
	    return projection([d[0].LONGITUDE, d[0].LATITUDE])[1];
	})
	.attr("id",function(d) {
	    //CSID stands for Circle School ID
	    return "CSID".concat(d[0].UNITID);
	})
	.attr("r",function(){return closeScale(this)});

    //Initializes the Voronoi tesselation
    self.voroi = d3.voronoi()
	.extent([[0,0],[width,height]]);

    //Creates the set of school locations.
    self.schools = schoolSimilarityMatrix.map(function(d){
	return projection([d[0].LONGITUDE, d[0].LATITUDE])});

    //Creates the dataset to be used for the Voronoi tesselation.
    self.schoolDataVoronoi = zip([
	schoolSimilarityMatrix,
	voronoi.polygons(schools)]);

    //Creates the Voronoi tesselation in the d3 way.
    self.mapVoronoi
	.selectAll('path')
	.data(schoolDataVoronoi)
	.enter().append('path')
	.classed('vor',true)
	.call(redrawPolygon)
	.attr("id",function(d){
	    //VSID stands for Voronoi School ID
	    return "VSID".concat(d[0][0].UNITID)})
	.style('pointer-events','all')
	.on('mouseover',function(d){
	    hoverSimilar(d[0]);
	    showTooltip(d[0][0])})
	.on('mouseout',function(d){
	    hoverSimilarOff();
	    hideTooltip()})
	.on('click',function(d){
	    selectSchool(d[0]);
	});

    //Creates the checkbox for displaying (or not) the Voronoi tesselation.
    d3.select("#show-voronoi")
	.on("change",function(){
	    d3.selectAll(".voronoi").classed("hidden-lines",!this.checked);
	});

    //Initiates the tooltip.
    self.tooltip = d3.select("#map")
	.append("div")
	.attr("class", "tooltip hidden-tooltip");

};

//Function that defines the application of the zoom feature.    
MapLayout.prototype.zoomZoom = function(){
    self.transform = d3.event.transform;
    self.scaleFactor = transform.k
    
    self.mapFeatures.attr('transform',transform)
	.style('stroke-width', 0.5/scaleFactor);
    
    self.mapSchools.attr('transform',transform);
    
    self.mapVoronoi.attr('transform',transform)
	.style('stroke-width',0.5/scaleFactor);
    
    self.mapSchools.selectAll('circle')
	.attr('r',function(){return closeScale(this,1)});

    self.mapSimilar.attr('transform',transform)
	.style('stroke-width',0.5/scaleFactor);
};

MapLayout.prototype.showTooltip = function(data){
    
    
    // Calculate the absolute left and top offsets of the tooltip. If the
    // mouse is close to the right border of the map, show the tooltip on
    // the left.

    var location = self.projection([data.LONGITUDE, data.LATITUDE])
    var left = Math.min(width/1.2-6 * data.INSTNM.length,location[0] + 5);
    var top = location[1] + height/(2*1.3)-15;
    
    self.tooltip.classed('hidden-tooltip',false)
	.attr("style", "left:" + left + "px; top:" + top + "px")
	.html(data.INSTNM)
};

/**
 * Hide the tooltip.
 */
MapLayout.prototype.hideTooltip = function(){   
    self.tooltip.classed('hidden-tooltip', true);
};

//Redraws a polygon. But, you probably could have guessed that.
MapLayout.prototype.redrawPolygon = function(polygon){
    polygon
	.attr("d", function(d) {return d[1] ? "M" + d[1].join("L") + "Z" : null; });
};

//Zips two arrays. This is a built-in function in Python. Just saying.
MapLayout.prototype.zip = function(arrays){
    return arrays[0].map(function(_,i){
        return arrays.map(function(array){return array[i]})
    });
};



